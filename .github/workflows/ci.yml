name: CI/CD Pipeline

# Trigger on pull requests and pushes to main branch
on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  # Use stable Rust toolchain
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Job for building and testing all contracts
  build-and-test:
    name: Build and Test Contracts
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          # Enable rustfmt and clippy for linting
          components: rustfmt, clippy

      # Cache Cargo dependencies for faster builds
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Install Soroban CLI for contract operations
      - name: Install Soroban CLI
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          cargo install --locked soroban-cli

      # Format check with rustfmt
      - name: Check code formatting
        run: cargo fmt --all -- --check

      # Lint with clippy
      - name: Run clippy linter
        run: cargo clippy --all-targets --all-features -- -D warnings

      # Build all contracts in workspace
      - name: Build all contracts
        run: cargo build --workspace

      # Run tests for all contracts
      - name: Run tests
        run: cargo test --workspace

      # Build contracts in release mode
      - name: Build contracts in release mode
        run: cargo build --workspace --release

  # Job for contract-specific testing
  contract-tests:
    name: Contract-Specific Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        contract: [
          "contracts/course/course_registry",
          "contracts/course/course_access", 
          "contracts/user_profile",
          "contracts/user_management",
          "contracts/test_contract"
        ]
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache Cargo dependencies
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Test individual contract
      - name: Test ${{ matrix.contract }}
        run: |
          cd ${{ matrix.contract }}
          cargo test

      # Build individual contract
      - name: Build ${{ matrix.contract }}
        run: |
          cd ${{ matrix.contract }}
          cargo build --release

  # Job for security and dependency checks
  security-checks:
    name: Security and Dependency Checks
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache Cargo dependencies
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Install cargo-audit for security vulnerability scanning
      - name: Install cargo-audit
        run: cargo install cargo-audit

      # Run security audit
      - name: Run security audit
        run: cargo audit

      # Install cargo-outdated for dependency updates check
      - name: Install cargo-outdated
        run: cargo install cargo-outdated

      # Check for outdated dependencies
      - name: Check outdated dependencies
        run: cargo outdated --exit-code 1 || echo "Some dependencies are outdated"

  # Job for code coverage (optional)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache Cargo dependencies
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Install cargo-tarpaulin for code coverage
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      # Generate code coverage report
      - name: Generate coverage report
        run: cargo tarpaulin --workspace --out Xml

      # Upload coverage to Codecov (optional)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./cobertura.xml
          fail_ci_if_error: false
